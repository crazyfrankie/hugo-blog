[
{
  "title": "Understanding Decentralization Through Log Processing",
  "content": "This article explores decentralized system design concepts and implementation approaches through the lens of log processing.\nOverview of Decentralized Systems Decentralization is a key concept in distributed system design that improves system reliability and fault tolerance by distributing control across multiple nodes.\nIn architecture, \u0026amp;ldquo;decentralization\u0026amp;rdquo; doesn\u0026amp;rsquo;t necessarily mean \u0026amp;ldquo;completely no center,\u0026amp;rdquo; but rather:\nAvoid irreplaceable single points of failure by …",
  "uri": "/en/decentration/"
},
{
  "title": "Some Thoughts on DDD",
  "content": "Project Introduction I\u0026amp;rsquo;m writing this article mainly to share some learning insights from the project practice of DDD. Since I\u0026amp;rsquo;m too lazy to read the theory, I\u0026amp;rsquo;m just guessing how DDD should be designed. For more details, please refer to the DDD official website: DDD Concept Introduction\nRecently, ByteDance has open-sourced their open-coze. The front end is React + TS, and the back end uses Go. Since I didn\u0026amp;rsquo;t use Py or TS, and I have a bit more knowledge of Go, I started …",
  "uri": "/en/ddd/"
},
{
  "title": "DB-Cache Consistency Problem",
  "content": "How to ensure the consistency between cache and database is a topic that has been discussed over and over again.\nBut many people still have a lot of doubts about this issue:\nShould the cache be updated or deleted? Should I choose to update the database first and then delete the cache, or to delete the cache first and then update the database? Why introduce message queues to ensure consistency? What problems may arise from delaying double deletion? Should we use it or not? \u0026amp;hellip; Introducing …",
  "uri": "/en/db-cache/"
},
{
  "title": "realisation",
  "content": "Man\u0026amp;rsquo;s physical body is the past and his consciousness is the present and future.\n",
  "uri": "/en/life/"
}]
