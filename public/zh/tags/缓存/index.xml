<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>缓存 on Crazyfrank 的博客</title>
    <link>http://localhost:1313/zh/tags/%E7%BC%93%E5%AD%98/</link>
    <description>Recent content in 缓存 on Crazyfrank 的博客</description>
    <generator>Hugo</generator>
    <language>zh-CN</language>
    <managingEditor>axu9417@gmail.com (crazyfrank)</managingEditor>
    <webMaster>axu9417@gmail.com (crazyfrank)</webMaster>
    <lastBuildDate>Thu, 11 Sep 2025 17:17:35 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/zh/tags/%E7%BC%93%E5%AD%98/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>缓存与数据库--一致性的取舍</title>
      <link>http://localhost:1313/zh/posts/%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93--%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84%E5%8F%96%E8%88%8D/</link>
      <pubDate>Thu, 11 Sep 2025 10:00:00 +0800</pubDate><author>axu9417@gmail.com (crazyfrank)</author>
      <guid>http://localhost:1313/zh/posts/%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93--%E4%B8%80%E8%87%B4%E6%80%A7%E7%9A%84%E5%8F%96%E8%88%8D/</guid>
      <description>&lt;p&gt;今天讲讲旁路缓存策略。&lt;/p&gt;&#xA;&lt;h2 id=&#34;概念介绍&#34;&gt;概念介绍&lt;/h2&gt;&#xA;&lt;p&gt;一般来说我们在业务中引入缓存，涉及到三种操作数据库和缓存的方式：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;读穿：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;应用读数据。&lt;/li&gt;&#xA;&lt;li&gt;查 Redis。命中则返回。&lt;/li&gt;&#xA;&lt;li&gt;未命中则查 MySQL。&lt;/li&gt;&#xA;&lt;li&gt;从 MySQL 取到数据后，写入 Redis。&lt;/li&gt;&#xA;&lt;li&gt;返回数据。&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;写穿：&#xA;&lt;ol&gt;&#xA;&lt;li&gt;应用更新数据。&lt;/li&gt;&#xA;&lt;li&gt;代码同时（或在同一个事务中）执行：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;更新 MySQL 数据库。&lt;/li&gt;&#xA;&lt;li&gt;更新（或失效）Redis 中的对应缓存。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;旁路缓存：&#xA;&lt;ul&gt;&#xA;&lt;li&gt;读操作：采用 “读穿” 策略。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Cache Hit -&amp;gt; 返回缓存数据。&lt;/li&gt;&#xA;&lt;li&gt;Cache Miss -&amp;gt; 从 DB 读，回填 Cache，再返回。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;写操作：先更新数据库，然后删除（失效）缓存。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这是“旁路缓存”策略的精髓——“先更新数据库，再删缓存”。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;对于读穿从上面的介绍也可以看出来它不是单独使用的，而写穿，目前没有一个中间件支持同时操作数据库，所以一般不使用，所以日常使用最多的也就说第三种方式：旁路缓存&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
